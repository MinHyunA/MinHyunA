import Cocoa

var a = 10, b = 20, c = 30, d = 40  // 전역 변수 : 어떤 함수에서도 호출 가능

func fn_1(aa:Int, c:Int, d:Int){ // aa는 매개 변수의 영역 : 함수 내부
                        // c 전역변수와 매개변수 중첩 가능 --> 매개변수로 인식
    var ee = 555  // 지역 변수: 함수 내부에서만 사용가능한 변수
    print("fn_1() 시작: \(aa),\(ee), \(a), \(b), \(c), \(d)") // b: 전역변수
    
    a += 1
    ee += 1
    // aa += 1  // 매개 변수는 상수이기 때문 대입이 불가능 (let과 동일)
    
    var b = 222 // b 전역변수와 지역변수 중첩 가능. 전역변수와 지역변수가 충돌 중. 다른 언어는 에러. 이 함수 안에서 b의 값에 중첩이 가능하여, 전역 변수이지만 지역 변수로 인식 중. -->이 기점 이전의 b는 전역 변수. 지역변수 선언 후는 이 함수 안에서는 지역 변수. 이 함수가 끝나면 다시 전역 변수로 바뀜. C언어는 모든 것을 구동하고자 하는데 이와 비슷한 마인드. 자바는 오류의 여지를 없애고자 이런 것이 불가능.
    var d = 444 // 우선순위 : 전역변수 < 매개변수 < 지역변수  --> 지역변수가 접근 권한이 강함. 전역변수는 공유의 역할이 가장 큼. parameter와 meter변수가 아니어도 가능. 전역변수는 위험하다. 쉽게 수정이 가능하기 때문. 보안 상 아무데서나 접근이 가능하기 때문 + 전역변수는 메모리 차지량이 큼.
    
    print("fn_1() 끝: \(aa),\(ee), \(a), \(b), \(c), \(d)") // b: 지역변수
}

func fn_2(){
//print("지역변수는 다른 함수 내에서도 부를 수 없다: \(ee)")  -> 오류
    print("fn_2() 시작: \(a)")
    
    print("fn_2() 끝: \(a)")
}

print("메인 시작 : \(a),\(b),\(c),\(d)")

fn_1(aa:10000, c:30000, d:40000)
fn_2()

print("메인 끝: \(a),\(b),\(c),\(d)")
//print("매개변수는 밖에서 부를 수 없다: \(aa)")  -> 오류
